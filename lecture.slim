section.center data-background="#000"
  h1.white Basic Object Model

section.center
  p There is a great definition of an <a href="http://c2.com/cgi/wiki?ObjectOriented">Object Oriented</a> system over <a href="http://c2.com/cgi/wiki?ObjectOriented">C2</a>.

section.center
  p Did I say how awesome <a href="http://c2.com">C2</a> is?

section.center data-background="#000"
  h2.white Questions

section.center
  p What is Enumerable?

section.center
  p Is String Enumerable?

section.center
  p Can we make String Enumerable?

section.center
  p What is a Enumerator?

section.center
  p When do we use it?

section.center
  p What is a proc?

section.center
  p What is a lambda?

section.center
  p What is the difference between proc and lambda?

section.center
  p What is #=== used for?

section
  h2 Encapsulation
  p A language mechanism for restricting access to some of the object's components.

section
  h2 Encapsulation
  p A language construct that facilitates the bundling of data with the methods (or other functions) operating on that data.

section
  h2 Inheritance
  p When an object or class is based on another object or class, using the same implementation (inheriting from a class) or specifying implementation to maintain the same behavior (realizing an interface; inheriting behavior).

section
  h2 Inheritance
  p It is a mechanism for code reuse and to allow independent extensions of the original software via public classes and interfaces.

section
  h2 Inheritance
  p The relationships of objects or classes through inheritance give rise to a hierarchy.

section
  h2 Polymorphism
  p The provision of a single interface to entities of different types

section
  h2 Polymorphism
  p A polymorphic type is a type whose operations can also be applied to values of some other type, or types.

section.center
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          [@x, @y, @z].map { |n| n ** 2 }.reduce(:+) ** 0.5
        end
      end

section.center
  img.inline src="img/troll.png"

section.center
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section.center data-background="#000"
  blockquote.white With great power comes great responsibility.
  p.white Stefan Kanev

section
  h2 Class
  p Opened by the keyword class
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section
  h2 Class
  p Can define methods
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section
  h2 Class
  p Can instruct objects to store instance variables
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section
  h2 Class
  p Call #initialize during creation
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section
  h2 Class
  p Inherit from Object by default
  pre: code.ruby
    '
      class Vector3D
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section
  h2 Class
  p Inherit from Object by default
  pre: code.ruby
    '
      class Vector3D < Object
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section.center data-background="#000"
  p.white Everything in Ruby is an object

section.center
  pre: code.ruby
    '
      >> Object.is_a? Object
      => true

section.center
  img.inline src="img/troll.png"

section
  h2 Class
  p There is no multiple inheritance
  pre: code.ruby
    '
      class Vector3D < Object
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end
      end

section
  h2 Class
  p Can override operators
  pre: code.ruby
    '
      class Vector3D < Object
        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end

        def +(other)
          if other.is_a? Numeric
            Vector.new(@x + other, @y, + other, @z + other)
          end
        end
      end

section data-background="#000"
  pre.white
    '
              Method  Operator
              Y       [ ] [ ]=
              Y       **
              Y       ! ~
              Y       * / %
              Y       + -
              Y       >> <<
              Y       &
              Y       ^ |
              Y       <= < > >=
              Y       <=> == === != =~ !~
                      &&
                      ||
                      .. ...
                      ? :
                      = %= { /= -= += |= &= >>= <<= *= &&= ||= **=
                      defined?
                      not
                      or and
                      if unless while until
                      begin/end

section data-background="#000"
  pre.white
    '
              Method  Operator
              Y       [ ] [ ]=
              Y       **
              Y       ! ~
              Y       * / %
              Y       + -
              Y       >> <<
              Y       &
              Y       ^ |
              Y       <= < > >=
              Y       <=> == === != =~ !~

              ^-----------------------------.
              | We can only override those. |
              '-----------------------------'

section
  h2 Class
  p Can expose instance variables
  pre: code.ruby
    '
      class Vector3D < Object
        attr_accessor :x, :y, :z

        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end

        def +(other)
          if other.is_a? Numeric
            Vector.new(@x + other, @y, + other, @z + other)
          end
        end
      end

section
  h2 Class
  p Communicate with other classes only with methods
  pre: code.ruby
    '
      class Vector3D < Object
        attr_accessor :x, :y, :z

        def initialize(x, y, z)
          @x, @y, @z = x, y, z
        end

        def length
          (@x ** 2 + @y ** 2 + @z ** 2) ** 0.5
        end

        def +(other)
          if other.is_a? Numeric
            Vector.new(@x + other, @y, + other, @z + other)
          else
            Vextor.new(@x + other.x, @y + other.y, @z + other)
          end
        end
      end
